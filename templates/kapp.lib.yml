#@ load("@ytt:struct", "struct")

#@ def kapp_cmd(templates, app_name):
#@   return "ytt -f " + " -f ".join(templates) +  " -f ../secrets/values.yml | kapp -y deploy -f - -a " + app_name
#@ end

#@ def kapp_kubeconfig(env_name, namespace, token, ca_cert, server):
apiVersion: v1
kind: Config
preferences: {}
clusters:
- name: #@ env_name
  cluster:
    certificate-authority-data: #@ ca_cert
    server: #@ server
users:
- name: #@ env_name + "-user"
  user:
    token: #@ token
contexts:
- name: #@ env_name
  context:
    cluster: #@ env_name
    user: #@ env_name + "-user"
current-context: #@ env_name
#@ end

#@ def kapp_task(input, kapp_config):
do:
- task: execute
  config:
    platform: linux
    image_resource:
      type: registry-image
      source:
        repository: bodymindarts/cepler-templates
        tag: latest
    inputs:
    - name: #@ input
      path: repo
    - name: secrets
    outputs:
    - name: repo
    params:
      #@ env = struct.decode(kapp_config)[input]
      KAPP_KUBECONFIG_YAML: #@ kapp_kubeconfig(input, env["namespace"], env["token"], env["ca_cert"], env["server"])
    run:
      dir: repo
      path: sh
      args:
      - "-c"
      - #@ kapp_cmd(kapp_config.templates, env["app_name"])
#@ end
